var documenterSearchIndex = {"docs":
[{"location":"#MultidimensionalTools.jl-Documentation","page":"Index","title":"MultidimensionalTools.jl Documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Index","title":"Index","text":"CurrentModule = MultidimensionalTools\nDocTestSetup = quote\n    using MultidimensionalTools\nend","category":"page"},{"location":"#Adding-MultidimensionalTools.jl","page":"Index","title":"Adding MultidimensionalTools.jl","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"using Pkg\nPkg.add(\"MultidimensionalTools\")","category":"page"},{"location":"#Documentation","page":"Index","title":"Documentation","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [MultidimensionalTools]","category":"page"},{"location":"#Main.MultidimensionalTools.adjacencies-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.adjacencies","text":"adjacencies(M::AbstractArray{T, N}, idx::AbstractIndex{N})\n\nadjacencies will get all adjacent element to an index in a given matrix.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.append_n_times-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, Integer, T}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.append_n_times","text":"Repeats a specified value n many times along the specified dimension.  If no fill_elem is given, and the element type of the matrix is a number, fills with zero.\n\njulia> A = rand(Int8, 2, 2)\n2×2 Array{Int8,2}:\n  28  23\n -47  54\n\njulia> append_n_times(A, 2, Int8(3), dims = 1) # repeat the value 3 twice along the first dimension\n4×2 Array{Int8,2}:\n  28  23\n -47  54\n   3   3\n   3   3\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.append_n_times_backwards-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, Integer, T}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.append_n_times_backwards","text":"julia> A = rand(Int8, 2, 2)\n2×2 Array{Int8,2}:\n  28  23\n -47  54\n\njulia> append_n_times_backwards(A, 2, Int8(3), dims = 1) # repeat the value 3 twice along the first dimension\n4×2 Array{Int8,2}:\n  3   3\n  3   3\n  28  23\n -47  54\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.expand_as_required-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, T, Union{AbstractVector{I}, NTuple{M, I}, CartesianIndices{N, NTuple{N, Base.OneTo{T}}}} where {I<:(Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer), T<:Integer, M}}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.expand_as_required","text":"expand_as_required(M::AbstractArray{T, N}, expand_by::T, inds::AbstractIndexOrIndices{N})\n\nGiven indices, expand_as_required will fill in a matrix with expand_by where needed if such indices are not currently accessible.  If no expand_by is given, and the element type of the matrix is a number, fills with zero.\n\njulia> A = rand(Int8, 2, 2)\n2×2 Array{Int8,2}:\n -96   83\n -94  -39\n\njulia> expand_as_required(A, zero(Int8), [(1, 1), (2, 2), (3, 3)])\n3×3 Array{Int8,2}:\n -96   83  0\n -94  -39  0\n   0    0  0\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.expanded_adjacencies-Union{Tuple{N}, Tuple{T}, Tuple{Array{T, N}, T, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.expanded_adjacencies","text":"expanded_adjacencies(M::Array{T, N}, expand_by::T, idx::AbstractIndex{N})\n\nexpanded_adjacencies will get all adjacencies of an index in the matrix M, given that the matrix is infinitely expanding by a single element beyond the specified M.  See also adjacencies and expand_as_required.  If no expand_by is given, and the element type of the matrix is a number, fills with zero.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.expanded_n_adjacent_to-Union{Tuple{T}, Tuple{N}, Tuple{AbstractArray{T, N}, T, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer, T}} where {N, T}","page":"Index","title":"Main.MultidimensionalTools.expanded_n_adjacent_to","text":"expanded_n_adjacent_to(M::AbstractArray{T, N}, expand_by::T, idx::AbstractIndex{N}, adj_elem::T)\n\nGiven a matrix M, counts the number of adjacent elements to index idx that are exactly the adj_elem, expanding the matrix if needed (see expanded_adjacencies).  If no expand_by is given, and the element type of the matrix is a number, fills with zero.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.extrema_indices-Union{Tuple{Union{AbstractVector{I}, NTuple{M, I}, CartesianIndices{N, NTuple{N, Base.OneTo{T}}}} where {I<:(Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer), T<:Integer, M}}, Tuple{N}} where N","page":"Index","title":"Main.MultidimensionalTools.extrema_indices","text":"extrema_indices(I::AbstractIndices{N}) -> NTuple{N, NTuple{N, Integer}}\nextrema_indices(i::AbstractIndex{N}...) -> NTuple{N, NTuple{N, Integer}}\nextrema_indices(A::AbstractArray{T, N}...) -> NTuple{N, NTuple{N, Integer}}\n\nGiven indices or arrays, returns an NTuple.  Each element in the NTuple represents a (min, max) tuple for each dimension.\n\njulia> T = [(3, 1), (4, 5), (6, 2), (1, 1)]\n4-element Array{Tuple{Int64,Int64},1}:\n (3, 1)\n (4, 5)\n (6, 2)\n (1, 1)\n\njulia> extrema_indices(T)\n1×2 Array{Tuple{Int64,Int64},2}:\n(1, 6)  (1, 5)\n\njulia> # that is, the (min, max) for dim 2 is (1, 5); etc.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.get_directions-Tuple{T} where T<:Integer","page":"Index","title":"Main.MultidimensionalTools.get_directions","text":"Returns an array of tuples of directions.\n\n    get_directions(dim::Integer; include_zero::Bool = false) -> Array{NTuple{N, Integer}, 1}\n\njulia> get_directions(3)\n27-element Array{Tuple{Int64,Int64,Int64},1}:\n (-1, -1, -1)\n (0, -1, -1)\n (1, -1, -1)\n (-1, 0, -1)\n (0, 0, -1)\n (1, 0, -1)\n (-1, 1, -1)\n (0, 1, -1)\n (1, 1, -1)\n (-1, -1, 0)\n (0, -1, 0)\n (1, -1, 0)\n (-1, 0, 0)\n (0, 0, 0)\n (1, 0, 0)\n (-1, 1, 0)\n (0, 1, 0)\n (1, 1, 0)\n (-1, -1, 1)\n (0, -1, 1)\n (1, -1, 1)\n (-1, 0, 1)\n (0, 0, 1)\n (1, 0, 1)\n (-1, 1, 1)\n (0, 1, 1)\n (1, 1, 1)\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.global_adjacencies-Union{Tuple{T}, Tuple{N}, Tuple{AbstractArray{T, N}, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer, T}} where {N, T}","page":"Index","title":"Main.MultidimensionalTools.global_adjacencies","text":"global_adjacencies(M::AbstractArray{T}, idx::AbstractIndex{N}, ignored_elem::T)\n\nUsing global_adjacencies_indices, returns the elements of each globally adjacent index.  This function is mainly used for global_n_adjacent_to.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.global_adjacencies_indices-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer, T}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.global_adjacencies_indices","text":"global_adjacencies(M::AbstractArray{T, N}, idx::AbstractIndex{N}, ignored_elem::T)\n\nReturns the \"globally\" adjacent indices in arbitrary positions in the cardinal directions from a specified index in matrix M, ignoring certain adjacent elements (i.e., skipping over them).\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.global_n_adjacent_to-Union{Tuple{T}, Tuple{N}, Tuple{AbstractArray{T, N}, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer, T, T}} where {N, T}","page":"Index","title":"Main.MultidimensionalTools.global_n_adjacent_to","text":"global_n_adjacent_to(M::AbstractArray{T, N},idx::AbstractIndex{N}, adj_elem::T, ignored_elem::T) where {N, T}\n\nGiven a matrix M, counts the number of adjacent elements to index idx that are exactly the adj_elem, skipping over certain elements if needed (see expanded_adjacencies).\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.is2Dsquare-Union{Tuple{Union{AbstractVector{T}, Number}}, Tuple{T}} where T","page":"Index","title":"Main.MultidimensionalTools.is2Dsquare","text":"Check whether the 2-dimensional aspect of a given array is a square.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.ishypercube-Tuple{Number}","page":"Index","title":"Main.MultidimensionalTools.ishypercube","text":"Check whether the given array is a cube (i.e., all its dimensions are the same size).  Despite the function name, this will work for dimension < 3\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.n_adjacencies-Tuple{Integer}","page":"Index","title":"Main.MultidimensionalTools.n_adjacencies","text":"n_adjacencies(dim::Integer) -> Integer\nn_adjacencies(M::AbstractArray{T, N}) -> Integer\nn_adjacencies(I::AbstractIndexOrIndices{T, N}) -> Integer\n\nGiven a matrix or dimension, returns the number of elements adjacent to any given element in an infinite lattice/matrix (i.e., not bounded by the edges of the array).  For edges, see adjacencies.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.n_adjacent_to-Union{Tuple{T}, Tuple{N}, Tuple{AbstractArray{T, N}, Union{NTuple{N, T}, CartesianIndex{N}} where T<:Integer, T}} where {N, T}","page":"Index","title":"Main.MultidimensionalTools.n_adjacent_to","text":"n_adjacent_to(M::AbstractArray{T, N}, idx::AbstractIndex{N}, adj_elem::T)\n\nGiven a matrix M, counts the number of adjacent elements to index idx that are exactly the adj_elem.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.n_faces-Tuple{Integer}","page":"Index","title":"Main.MultidimensionalTools.n_faces","text":"n_adjacencies(dim::Integer) -> Integer\nn_adjacencies(M::AbstractArray{T, N}) -> Integer\nn_adjacencies(I::AbstractIndexOrIndices{T, N}) -> Integer\n\nGiven a matrix or dimension, returns the number of faces of the structure.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.promote_to_3D-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, T}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.promote_to_3D","text":"promote_to_3D(M::AbstractArray{T, N}, fill_elem::T)\npromote_to_3D(M::AbstractArray{T, N}) where T <: Number\n\nA simple, self-evident wrapper for promote_to_nD.   No fill_elem assumes that the value is zero (if it can be).\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.promote_to_nD-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T, N}, Integer, T}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.promote_to_nD","text":"function promote_to_nD(M::AbstractArray{T, N}, n::Integer, fill_elem::T)\n\nAssumes the given matrix M is an (n - 1) dimensional slice of an n-dimensional structure, and fills in the array to n dimensions with fill_elem.  If no fill_elem is given, and the element type of the matrix is a number, fills with zero.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.reduce_dims-Union{Tuple{AbstractArray{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Index","title":"Main.MultidimensionalTools.reduce_dims","text":"reduce_dim(A::AbstractArray{T, N}; reduce_by::Int = 1)\n\nReduce an N-dimensional array A to dimensions N - reduce_by.  Can reduce arbitrarily.  Currently unsafe (i.e., doesn't check that reduce_by < ndims(A).\n\njulia> A = zeros(Int, 3, 3, 3);\n\njulia> reduce_dims(A)\n3×3 Matrix{Vector{Int64}}:\n [0, 0, 0]  [0, 0, 0]  [0, 0, 0]\n [0, 0, 0]  [0, 0, 0]  [0, 0, 0]\n [0, 0, 0]  [0, 0, 0]  [0, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.tryindex-Tuple{AbstractArray, Vararg{Union{NTuple{N, T}, CartesianIndex{N}} where {N, T<:Integer}}}","page":"Index","title":"Main.MultidimensionalTools.tryindex","text":"tryindex(M::AbstractArray{T, N}, inds::AbstractIndex{N}}...)\ntryindex(M::AbstractArray{T, N}, inds::AbstractIndices{N}})\n\nFor each index specified, gets the index or missing if the index is unavailable.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MultidimensionalTools.𝟘-Tuple{T} where T<:Integer","page":"Index","title":"Main.MultidimensionalTools.𝟘","text":"𝟘(n::Integer) -> NTuple{n, Integer}\n\\bbzero<tab>(n::Integer) -> NTuple{n, Integer}\n\nSimply returns the zero tuple of a given dimension.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"}]
}
